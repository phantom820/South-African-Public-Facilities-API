/*
 * This file was generated by the Gradle 'init' task.
 */
application {
    mainClass.set( "com.south.african.data.api.Application")
}

plugins {
    `application`
    `java-library`
    id("io.freefair.lombok") version "8.1.0"
    id("checkstyle")
    id("org.springframework.boot") version "2.7.15" // Use the appropriate version of Spring Boot plugin
    id("io.spring.dependency-management") version "1.1.4"
}

repositories {
    mavenLocal()
    maven {
        url = uri("https://repo.maven.apache.org/maven2/")
    }
}

dependencies {
    api("org.springframework.boot:spring-boot-starter-data-jpa")
    api("org.springframework.boot:spring-boot-starter-web")
    api("org.projectlombok:lombok:1.18.28")
    api("com.googlecode.json-simple:json-simple:1.1.1")
    api("com.google.guava:guava:31.1-jre")
    api("org.hibernate:hibernate-entitymanager:5.6.15.Final")
    api("org.hibernate:hibernate-core:5.6.15.Final")
    api("org.springframework.boot:spring-boot-starter-log4j2:2.7.14")
    api("org.apache.logging.log4j:log4j-layout-template-json:2.20.0")
    api("org.springframework.boot:spring-boot-starter-actuator")
    api("org.springdoc:springdoc-openapi-ui:1.6.12")
    api("org.springframework.boot:spring-boot-starter-thymeleaf")
    api("com.bucket4j:bucket4j-core:8.1.0")
    runtimeOnly("org.springframework.boot:spring-boot-devtools")
    runtimeOnly("com.h2database:h2:2.1.214")
    runtimeOnly("io.micrometer:micrometer-registry-prometheus:1.11.2")
    testImplementation("org.springframework.boot:spring-boot-starter-test")
    testImplementation("org.junit.jupiter:junit-jupiter-engine:5.7.2")
    testImplementation("org.junit.vintage:junit-vintage-engine:5.9.1")
}

configurations {
    all {
        exclude(group = "org.springframework.boot", module = "spring-boot-starter-logging")
    }
}

group = "com"
version = "0.0.1-SNAPSHOT"
description = "south.african.data.api"
java.sourceCompatibility = JavaVersion.VERSION_11

tasks.withType<JavaCompile>() {
    options.encoding = "UTF-8"
}

tasks.withType<Javadoc>() {
    options.encoding = "UTF-8"
}

checkstyle {
    toolVersion = "8.24"
    configFile = file("config/checkstyle/checkstyle.xml")
}

tasks.checkstyleMain {
    source = fileTree("src/main/java")
}

tasks.checkstyleTest {
    source = fileTree("src/test/java")
}

// Configure bootRun task to pass system properties
tasks {
    withType<org.springframework.boot.gradle.tasks.run.BootRun> {
        systemProperties(System.getProperties().stringPropertyNames().associateWith { System.getProperty(it) })
    }
}